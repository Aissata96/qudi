##  Example QuDi configuration file.
##
##
##
## IMPORTANT: 	The format of every 'module.Class' line has changed on 28.6.2015.
##				The class name now needs to be explicitly given here in the config.
##				the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray']

    # Devices are defined in another config file:
    #hardware: readConfigFile('devices.cfg')
    module_server:
        address: ''
        port: 5800
    #remoteport: 5800
    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:

    mykrowave:
        module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
        gpib_address: 'GPIB0::28::INSTR'
        gpib_timeout: 60

    mykrowave2:
        module.Class: 'microwave.mw_source_gigatronics.MicrowaveGigatronics'
        gpib_address: 'GPIB0::6::INSTR'
        gpib_timeout: 60

    microwave_dummy:
        module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'
        gpib_address: 'dummy'
        gpib_timeout: 20

    mydummyfastcounter:
        module.Class: 'fast_counter_dummy.FastCounterDummy'
        remoteaccess: true

    mydummywavemeter:
        module.Class: 'wavemeter_dummy.WavemeterDummy'
        remoteaccess: true

    mydummypulser:
        module.Class: 'pulser_dummy.PulserDummy'

    nitrigger:
        module.Class: 'ni_x_di_trigger.NIXDiTrigger'
        trigger_output_channel:
            - '/Dev1/Port0/Line4'
            - '/Dev1/Port0/Line5'
            - '/Dev1/Port0/Line6'
        default_clock_frequency: 100

    mydummynitrigger:
        module.Class: 'nitrigger_dummy.NIXDiTriggerDummy'
        trigger_output_channel:
            - '/Dev1/Port0/Line4'
            - '/Dev1/Port0/Line5'
            - '/Dev1/Port0/Line6'
        default_clock_frequency: 100

    pulsegenerator:
        module.Class: 'pulser_dummy.PulserDummy'
        remoteaccess: true

    remotefastcounter:
        #cryo4pulser
        module.Class: 'does_not_matter.DoesNotMatter'
        remote: 'rpyc://134.60.83.153:12345/fastcounter'


    #specswitch:
    #    module.Class: 'switches.flipmirror.FlipMirror'
    #    interface: 'ASRL3'

    switch2:
        module.Class: 'switches.flipmirror.FlipMirror'
        interface: 'ASRL5'

    fpgaswitch:
        module.Class: 'FPGA_switch.32bit_version.Switch.Fpgaswitch'

    mynicard:
        module.Class: 'national_instruments_x_series.NationalInstrumentsXSeries'
        clock_channel: '/Dev1/Ctr0'
        scanner_clock_channel: '/Dev1/Ctr2'
        photon_sources:
            - '/Dev1/PFI8'
            - '/Dev1/PFI9'
        counter_channels:
            - '/Dev1/Ctr1'
        #counter_ai_channels:  # optional
        #    - '/Dev1/AI1'
        scanner_counter_channels:
            - '/Dev1/Ctr3'
        #scanner_ai_channels:  # optional
        #    - '/Dev1/AI0'
        scanner_ao_channels: #x,y,z,a
            - '/Dev1/AO0'
            - '/Dev1/AO1'
            - '/Dev1/AO2'
            - '/Dev1/AO3'
        scanner_position_ranges:
            - [0e-6, 200e-6]
            - [0e-6, 200e-6]
            - [-100e-6, 100e-6]
            - [0, 1]
        scanner_voltage_ranges:
            - [-10, 10]
            - [-10, 10]
            - [-10, 10]
            - [-2.9, 2.9]

        default_samples_number: 10
        defualt_clock_frequency: 100
        default_scanner_clock_frequency: 100
        gate_in_channel: '/Dev1/PFI9'
        counting_edge_rising: True
        odmr_trigger_channel: '/Dev1/PFI15'
        remoteaccess: true

    mydummynicard:
        module.Class: 'nicard_dummy.NationalInstrumentsXSeriesDummy'
        clock_channel: '/Dev1/Ctr0'
        scanner_clock_channel: '/Dev1/Ctr2'
        photon_sources:
            - '/Dev1/PFI8'
            - '/Dev1/PFI9'
        counter_channels:
            - '/Dev1/Ctr1'
        #counter_ai_channels:  # optional
        #    - '/Dev1/AI1'
        scanner_counter_channels:
            - '/Dev1/Ctr3'
        #scanner_ai_channels:  # optional
        #    - '/Dev1/AI0'
        scanner_ao_channels: #x,y,z,a
            - '/Dev1/AO0'
            - '/Dev1/AO1'
            - '/Dev1/AO2'
            - '/Dev1/AO3'
        scanner_position_ranges:
            - [0e-6, 200e-6]
            - [0e-6, 200e-6]
            - [-100e-6, 100e-6]
            - [0, 1]
        scanner_voltage_ranges:
            - [-10, 10]
            - [-10, 10]
            - [-10, 10]
            - [-2.9, 2.9]

        default_samples_number: 10
        defualt_clock_frequency: 100
        default_scanner_clock_frequency: 100
        gate_in_channel: '/Dev1/PFI9'
        counting_edge_rising: True
        odmr_trigger_channel: '/Dev1/PFI15'
        remoteaccess: true


    nicard_6323_instreamer:
        module.Class: 'ni_x_series_in_streamer.NIXSeriesInStreamer'
        device_name: 'Dev1'
        digital_sources:  # optional
            - 'PFI8'
            - 'PFI9'
        #analog_sources:  # optional
        #    - 'ai0'
        #    - 'ai1'
        # external_sample_clock_source: 'PFI0'  # optional
        # external_sample_clock_frequency: 1000  # optional
        #adc_voltage_range: [-10, 10]  # optional
        max_channel_samples_buffer: 10000000  # optional
        read_write_timeout: 10  # optional

    remotenicard:
        module.Class: 'does_not_matter.DoesNotMatter'
        remote: 'rpyc://134.60.83.202:12345/mynicard'
    remotewavemeter:
        module.Class: 'does_not_matter.DoesNotMatter'
        ## wavemeter connected to Dye laser PC
        remote:  'rpyc://134.60.83.177:5800/highfinesse'
        ## wavemeter connected to TiSa PC
        #remote: 'rpyc://134.60.83.201:5800/highfinesse'

    remotespectrometer:
        module.Class: 'does_not_matter.DoesNotMatter'
        remote: 'rpyc://134.60.83.161:5800/winspec'

    remotesmiq:
        module.Class: 'does_not_matter.DoesNotMatter'
        remote: 'rpyc://134.60.83.202:5800/smiq'
        #module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'
        #gpib_address: 'dummy'
        #gpib_timeout: 20

    hwp_motor:
        module.Class: 'motor.aptmotor.APTOneAxisStage'
        motor_type_serial_label:
          - HWTYPE_TDC001
          - 83833415
          - phi

    newfocuslaser:
        module.Class: 'laser.newfocus_laser.NewfocusDiodeLaser'
        laserid: 4106
        devicekey: 6700 SN60615
        remoteaccess: True

    remotenewfocuslaser:
        module.Class: 'does_not_matter.DoesNotMatter'
        remote: 'rpyc://134.60.83.177:5800/newfocuslaser'

    switch:
        module.Class: 'switches.flipmirror.FlipMirror'
        interface: 'ASRL3'
        remoteaccess: True

    NIXDiPWM:
        module.Class: 'ni_x_PWM.NIXDiPWM'
        PWM_output_channel: '/Dev1/Port0/Line7'
        default_clock_frequency: 10000

    cw_laser_switch:
        module.Class: 'switches.digital_switch_ni.DigitalSwitchNI'
        channel: '/Dev1/port0/line4:5'
        switch_time: 0.1
        reset_states: False
        names_of_states: [['Low', 'High'], ['Low', 'High']]
        names_of_switches: ['One', 'Two']

    remotefpga:
        module.Class: 'does_not_matter.DoesNotMatter'
        remote: 'rpyc://134.60.83.202:12345/pulsegenerator'
logic:
    qdplot:
        module.Class: 'qdplot_logic.QdplotLogic'
        connect:
            savelogic: 'savelogic'

    spectrumscannerinterfuse:
        module.Class: 'interfuse.confocal_scanner_spectrometer_interfuse.SpectrometerScannerInterfuse'
        connect:
            fitlogic: 'fitlogic'
            confocalscanner1: 'mynicard'
            spectrometer1: 'remotespectrometer'

    pulsedmasterlogic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    sequencegeneratorlogic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #assets_storage_path: 'C:/Users/<username>/saved_pulsed_assets'
        #additional_predefined_methods_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #additional_sampling_functions_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #overhead_bytes: 4294967296  # Not properly implemented yet
        connect:
            pulsegenerator: 'mydummypulser'

    pulsedmeasurementlogic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        raw_data_save_type: 'text'  # optional
        #additional_extraction_path: 'C:\\Custom_dir\\Methods'  # optional
        #additional_analysis_path: 'C:\\Custom_dir\\Methods'  # optional
        connect:
            fastcounter: 'mydummyfastcounter'
            pulsegenerator: 'mydummypulser'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            microwave: 'microwave_dummy'

    counter:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mynicard'
            savelogic: 'savelogic'

    wavemeterlogger:
        module.Class: 'wavemeter_logger_logic.WavemeterLoggerLogic'
        logic_acquisition_timing: 20
        logic_update_timing: 100
        connect:
            wavemeter1: 'remotewavemeter'
            savelogic: 'savelogic'
            counterlogic: 'counter'
            fitlogic: 'fitlogic'

    laserscanner:
        module.Class: 'laser_scanner_logic_ou.LaserScannerLogic'
        connect:
            #laser: 'mydummynewfocuslaser' #laser_dummy
            wavemeter1: 'mydummywavemeter'#'remotewavemeter' #wavemeter_dummy
            confocalscanner1: 'mydummynicard'#'mynicard' #todo: mydummyscanner
            savelogic: 'savelogic'
            do: 'mydummynitrigger'#'nitrigger_logic' #todo:nitrigger_dummy
        remoteaccess: True

    time_series_reader_logic:
        module.Class: 'time_series_reader_logic.TimeSeriesReaderLogic'
        max_frame_rate: 10  # optional (10Hz by default)
        calc_digital_freq: True  # optional (True by default)
        connect:
            _streamer_con: 'nicard_6323_instreamer'
            _savelogic_con: 'savelogic'

    switchlogic:
        module.Class: 'switch_logic.SwitchLogic'
        connect:
            switch2: 'switch2'
            switch1: 'specswitch'


    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'mynicard'

    fitlogic:
        module.Class: 'fit_logic.FitLogic'
        #additional_fit_methods_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: 'Data/'
        log_into_daily_directory: True
        save_pdf: True
        save_png: True

    scanner:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            savelogic: 'savelogic'

    spectrumscanner:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner: 'spectrumscannerinterfuse'
            savelogic: 'savelogic'

    optimizer:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            fitlogic: 'fitlogic'

    poimanager:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scanner'
            optimiserlogic: 'optimizer'
            savelogic: 'savelogic'

    odmr:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'mynicard'
            fitlogic: 'fitlogic'
            microwave1: 'remotesmiq'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
        scanmode: 'LIST'

    # this interfuse enables odmr if hardware trigger is not available or if
    # the counter has only two channels:
    odmr_counter_microwave_interfuse:
        module.Class: 'interfuse.odmr_counter_microwave_interfuse.ODMRCounterMicrowaveInterfuse'
        connect:
            slowcounter: 'mynicard'
            microwave: 'remotesmiq'

    # this oder logic runs now with the interfuse
    odmr2:
        module.Class: 'odmr_logic.ODMRLogic'
        connect:
            odmrcounter: 'odmr_counter_microwave_interfuse'
            fitlogic: 'fitlogic'
            microwave1: 'odmr_counter_microwave_interfuse'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'
        scanmode: 'LIST'


    spectrum:
        module.Class: 'spectrum.SpectrumLogic'
        connect:
            spectrometer: 'remotespectrometer'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            odmrlogic: 'odmr'

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
            scannerLocationRefocus:
                module: 'refocus'
                pausetasks:
                  - scan
                  - odmr
                needsmodules:
                    optimizer: 'optimizer'

    simplenitrigger:
        module.Class: 'NI_digital_trigger.NIDigitalTriger'
        dichannelprefix: '/Dev1/Port0'

    nitrigger_logic:
        module.Class: 'ni_trigger_logic.NIDigitalTrigerLogic'
        connect:
            _device: 'mydummynitrigger'#'nitrigger'

    ni_PWM_logic:
        module.Class: 'ni_PWM_logic.NIDigitalPWMLogic'
        connect:
            _device: 'NIXDiPWM'

    switch_logic:
        module.Class: 'switch_logic.SwitchLogic'
        connect:
            switch: 'cw_laser_switch'
gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    countergui:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counter'

    confocalgui:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scanner'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizer'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02

    confocalspecscangui:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'spectrumscanner'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizer'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02

    time_series_gui:
        module.Class: 'time_series.time_series_gui.TimeSeriesGui'
        use_antialias: True  # optional, set to False if you encounter performance issues
        connect:
            _time_series_logic_con: 'time_series_reader_logic'

    wavemeterloggui:
        module.Class: 'wavemeterlogger.wavemeterloggui.WavemeterLogGui'
        connect:
            wavemeterloggerlogic1: 'wavemeterlogger'
            savelogic: 'savelogic'

    switchgui:
        module.Class: 'switch.switch_gui.SwitchGui'
        connect:
            switchlogic: 'switch_logic'

    poimanagergui:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic: 'poimanager'
            scannerlogic: 'scanner'

    qdplotter:
        module.Class: 'qdplotter.qdplottergui.QdplotterGui'
        connect:
            qdplotlogic1: 'qdplot'

    odmrgui:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmr'
            savelogic: 'savelogic'

    odmrgui2:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmr2'
            savelogic: 'savelogic'

    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic'

    spectrometergui:
        module.Class: 'spectrometer.spectrometergui.SpectrometerGui'
        connect:
            spectrumlogic: 'spectrum'

    laserscangui:
        module.Class: 'laserscanner.laserscannergui.VoltScanGui'
        connect:
            voltagescannerlogic1: 'laserscanner'
            savelogic: 'savelogic'